/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ (() => {

eval("// Wait for the DOM to be fully loaded\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize tooltips\n    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n\n    // Smooth scrolling for navigation links\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n        anchor.addEventListener('click', function (e) {\n            e.preventDefault();\n            const target = document.querySelector(this.getAttribute('href'));\n            if (target) {\n                target.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'start'\n                });\n            }\n        });\n    });\n\n    // Form validation\n    const forms = document.querySelectorAll('form');\n    forms.forEach(form => {\n        form.addEventListener('submit', function(e) {\n            e.preventDefault();\n            \n            // Basic form validation\n            const inputs = form.querySelectorAll('input[required]');\n            let isValid = true;\n            \n            inputs.forEach(input => {\n                if (!input.value.trim()) {\n                    isValid = false;\n                    input.classList.add('is-invalid');\n                } else {\n                    input.classList.remove('is-invalid');\n                }\n            });\n\n            if (isValid) {\n                // Show success message\n                const successMessage = document.createElement('div');\n                successMessage.className = 'alert alert-success mt-3';\n                successMessage.textContent = 'Form submitted successfully!';\n                form.appendChild(successMessage);\n\n                // Reset form after 2 seconds\n                setTimeout(() => {\n                    form.reset();\n                    successMessage.remove();\n                }, 2000);\n            }\n        });\n    });\n\n    // Scroll animation for sections\n    const sections = document.querySelectorAll('section');\n    const observerOptions = {\n        root: null,\n        rootMargin: '0px',\n        threshold: 0.1\n    };\n\n    const observer = new IntersectionObserver((entries, observer) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                entry.target.classList.add('visible');\n                observer.unobserve(entry.target);\n            }\n        });\n    }, observerOptions);\n\n    sections.forEach(section => {\n        observer.observe(section);\n    });\n\n    // Event registration functionality\n    const registerButtons = document.querySelectorAll('.btn-success');\n    registerButtons.forEach(button => {\n        button.addEventListener('click', function() {\n            if (!isLoggedIn()) {\n                // Show login modal if user is not logged in\n                const loginModal = new bootstrap.Modal(document.getElementById('loginModal'));\n                loginModal.show();\n            } else {\n                // Show success message for registered users\n                const successMessage = document.createElement('div');\n                successMessage.className = 'alert alert-success mt-3';\n                successMessage.textContent = 'Successfully registered for the event!';\n                this.parentElement.appendChild(successMessage);\n                \n                setTimeout(() => {\n                    successMessage.remove();\n                }, 2000);\n            }\n        });\n    });\n\n    // Check if user is logged in (simulated)\n    function isLoggedIn() {\n        return localStorage.getItem('isLoggedIn') === 'true';\n    }\n\n    // Handle login form submission\n    const loginForm = document.querySelector('#loginModal form');\n    if (loginForm) {\n        loginForm.addEventListener('submit', function(e) {\n            e.preventDefault();\n            localStorage.setItem('isLoggedIn', 'true');\n            const loginModal = bootstrap.Modal.getInstance(document.getElementById('loginModal'));\n            loginModal.hide();\n            \n            // Update UI to show logged-in state\n            updateLoginState(true);\n        });\n    }\n\n    // Handle register form submission\n    const registerForm = document.querySelector('#registerModal form');\n    if (registerForm) {\n        registerForm.addEventListener('submit', function(e) {\n            e.preventDefault();\n            localStorage.setItem('isLoggedIn', 'true');\n            const registerModal = bootstrap.Modal.getInstance(document.getElementById('registerModal'));\n            registerModal.hide();\n            \n            // Update UI to show logged-in state\n            updateLoginState(true);\n        });\n    }\n\n    // Update UI based on login state\n    function updateLoginState(isLoggedIn) {\n        const loginButton = document.querySelector('[data-bs-target=\"#loginModal\"]');\n        const registerButton = document.querySelector('[data-bs-target=\"#registerModal\"]');\n        \n        if (isLoggedIn) {\n            loginButton.textContent = 'Profile';\n            registerButton.style.display = 'none';\n        } else {\n            loginButton.textContent = 'Login';\n            registerButton.style.display = 'block';\n        }\n    }\n\n    // Initialize login state\n    updateLoginState(isLoggedIn());\n}); \n\n//# sourceURL=webpack://dsolve-25/./index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./index.js"]();
/******/ 	
/******/ })()
;